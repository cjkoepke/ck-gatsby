{"componentChunkName":"component---src-templates-post-js","path":"/posts/an-accessible-autocomplete-input","result":{"data":{"wpgraphql":{"post":{"blocks":[{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Recently on a project, I had to implement an accessible autocomplete input on a search form. <a href=\"https://twitter.com/iamtimwright\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Tim Wright (opens in a new tab)\">Tim Wright</a> suggested I used <a href=\"https://github.com/alphagov/accessible-autocomplete\">Accessible Autocomplete</a>, and I'm glad he did because it's pretty great.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The library targets an element as its render wrapper. The benefit here is that it not only defaults to no dependencies, but also easily incorporates into other frameworks like React. The downside is that you'll have to handle the fallback for non-JavaScript implementation.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The implementation and configuration are very extendible and was fairly straightforward to incorporate, and I would definitely recommend it.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The library hinges on a <code>source</code> parameter to read a list of data and match the current query to the most relevant results.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"From the docs:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"import autocomplete from 'accessible-autocomplete';\nconst results = [\n    'France',\n    'Germany',\n    'United Kingdom'\n];\nautocomplete({\n    target: document.querySelector( '#my-input' ),\n    source: results\n});","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Now, when a user types into the input, an accessible list (with optional keyboard navigation) will populate the closest matching results.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"Asynchronous Source","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"In my particular scenario, the results were determined through a third-party source, where the query was sent as a parameter string:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreQuoteBlock","name":"core/quote","attributes":{"align":null,"citation":"","value":"<p>https://external-url/?query=[query]</p>"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Thankfully, the library supports a function argument for the <code>source</code> parameter, with two useful arguments:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"autocomplete({\n    element: document.querySelector( '#my-input-wrapper' ),\n    source: ( query, populateResults ) => {\n        // Do something.\n    }\n});","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"This allows us to do something with the <code>query</code>. But more importantly, it gives us a manual update function that we can push results to.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"This lets us do an asynchronous function and push the new source array once we get the response back:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"autocomplete( {\n    source: async ( query, populateResults ) => {\n        const res = await fetchSource( query );\n        populateResults( res );\n    }\n})\n\n/**\n * @function fetchSource\n * Fetch the source array and return it's JSON response.\n *\n * @param {string} query\n */\nasync function fetchSource( query ) {\n    const res  = await fetch( `https://external-url.com/?query=${encodeURIComponent( query )}` );\n    const data = await res.json();\n    return data;\n}","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Of course, this assumes that the response is in the correct format (an array of strings to sift through). If it's not, you can update it before sending it back and updating the results.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"Debouncing","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"One thing to note is that this library doesn't debounce the typing of the keyboard. It does offer a minimum character count before firing off the results. While this is nice, retrieving an external source array seemed as though it required a bit more conservatism:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"import debounce from 'debounce'\nautocomplete({\n    source: debounce( async ( query, populateResults ) => {\n\tconst res = await fetchSource( query );\n\tpopulateResults( res );\n    }, 300 )\n})","className":"javascript"}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"Downsides","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The major downsides to this library are that the <code>autocomplete</code> constructor does not return an instance for later reference. Therefore, tracking the autocomplete instance is nearly impossible.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Another major hurdle is that the <code>autocomplete</code> library exposes no internal methods of any kind in order to manipulate the lifecycle, behavior, or state of the input.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"These actually ended up being major blockers for use in this project, and I ended up having to hack together a reluctantly \"good-enough\" solution that will be more difficult to maintain.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Since this library is so close, however, it's likely a great candidate for open source contribution. You can see <a href=\"https://github.com/alphagov/accessible-autocomplete/issues/390\">an open issue for instance creation here</a>.","dropCap":false,"fontSize":null}}],"date":"2020-02-13T16:58:11","excerpt":"<p>Recently on a project, I had to implement an accessible autocomplete input on a search form. Tim Wright suggested I used Accessible Autocomplete, and I&#8217;m glad he did because it&#8217;s pretty great. The library targets an element as its render wrapper. The benefit here is that it not only defaults to no dependencies, but also [&hellip;]</p>\n","title":"An Accessible Autocomplete Input","slug":"an-accessible-autocomplete-input","postId":63,"author":{"avatar":{"url":"http://0.gravatar.com/avatar/c4e7524abdec288e00e23dc1d15f91d7?s=96&d=mm&r=g","localFile":{"childImageSharp":{"fixed":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='40'%20height='40'%20viewBox='0%200%2040%2040'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%200l6%202%205%202-2%201-5-2H0v18l1%2019%202-2%202-4c0-2%200-2-2-2l-1-5v-5h4l4-1%202%201v4l4%209%202%202c2%204%204%204%205%201l2-2%201-1%201-5c0-4-1-4-3%200-2%202-4%203-3%200l-2-1-3-1h1l2-1h2l3-1c1%200%201-1-2-1-4-2-5-1-6%200-1%202-1%202-3-2l-2-4%204-1c5%200%205-2%201-2-2%200-3%200-3-2%200-3%203-5%208-6s6%200%206%204l1%204%201-1c0-3%201-3%204-2s3%201%203%207c0%205%200%207%202%208%203%202%203%2010%200%209l-2%202h3c2%200%202-3%202-18L40%202c0-2-3-2-20-2H0m0%2022c0%2012%201%2014%201%206V16l4%201c5%201%205%202%204-5V6H5L2%207%201%206%200%2022'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","width":40,"height":40,"src":"/static/9172a1c088de62f7ef5f5d27fc94f236/b13df/c4e7524abdec288e00e23dc1d15f91d7.jpg","srcSet":"/static/9172a1c088de62f7ef5f5d27fc94f236/b13df/c4e7524abdec288e00e23dc1d15f91d7.jpg 1x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/c28c8/c4e7524abdec288e00e23dc1d15f91d7.jpg 1.5x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/4e333/c4e7524abdec288e00e23dc1d15f91d7.jpg 2x","srcWebp":"/static/9172a1c088de62f7ef5f5d27fc94f236/44b89/c4e7524abdec288e00e23dc1d15f91d7.webp","srcSetWebp":"/static/9172a1c088de62f7ef5f5d27fc94f236/44b89/c4e7524abdec288e00e23dc1d15f91d7.webp 1x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/05cc6/c4e7524abdec288e00e23dc1d15f91d7.webp 1.5x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/e90a5/c4e7524abdec288e00e23dc1d15f91d7.webp 2x"}}}},"description":null,"nickname":null,"firstName":"Calvin","lastName":"Koepke"},"featuredImage":null}}},"pageContext":{"id":"cG9zdDo2Mw=="}}}