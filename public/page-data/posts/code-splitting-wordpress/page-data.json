{"componentChunkName":"component---src-templates-post-js","path":"/posts/code-splitting-wordpress","result":{"data":{"wpgraphql":{"post":{"blocks":[{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"<strong>I’m sure you’ve been here before</strong>: you’ve just been assigned to this large project on a major client website. It includes a cohesive component-driven design system, and strives to reuse and inherit those components throughout the application.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"You think to yourself,&nbsp;<em>“This is going to be great!”</em>","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"You open up your&nbsp;<a rel=\"noreferrer noopener\" href=\"https://www.jetbrains.com/phpstorm/\" target=\"_blank\">code editor of choice</a>, and gleefully start the new project (this articles assumes a&nbsp;<a rel=\"noreferrer noopener\" href=\"https://github.com/10up/theme-scaffold\" target=\"_blank\">10up Theme Scaffold</a> structure, but the principles apply anywhere).","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"You're ready to make some engineering magic.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Fast-forward 8 weeks and you’re about done. Each component is nestled nicely in a theme partial, and equally segmented in your CSS and JS folders, under a unified naming scheme.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Everything works great. Except one small, or shall we say large, problem:&nbsp;<strong>your JavaScript file is just over 2 megabytes in size, even when it's compressed</strong>.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"We’ve all been here, and there’s nothing like the feeling of months of quality module building getting nullified by poor performance.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"It’s usually at this point that we begin wishing we were using React as our main application infrastructure, depressingly watching as other applications, just like ours, code-split their dependencies on the fly and deliver (if done correctly) resources to the browser half the size of ours.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"The Problem","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Take heart though. In many cases, the performance gains achieved by JS frameworks in terms of asset size are lost by the sheer size of the frameworks themselves, often-times hitting sizes upwards of 2-3mb.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Still, code-splitting asset delivery is the great envy of the WordPress stack. But delivering only what’s necessary to the user is an uphill battle, and usually results in multiple conditionals throughout the code-base, if not just as many JavaScript files.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"When modern WordPress sites rely on JavaScript almost as much as they do PHP, we begin to dance with two resources that are not inherently aware of each other. Conditionals duplicate between languages, and if we try to achieve true dynamic asset delivery we usually pay the price in terms of technical debt.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Recently, I experimented with a method for achieving on-demand components while keeping complexity to a minimum. I’d love to hear your feedback!","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"Code-Splitting to the Rescue","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Webpack comes with a great feature known as&nbsp;<a rel=\"noreferrer noopener\" href=\"https://webpack.js.org/guides/code-splitting/\" target=\"_blank\">code-splitting</a>. Without getting into too much configuration detail, you can enable code-splitting in the 10up Theme Scaffold with 3 basic changes:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"1. Update Output Config","level":3}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The first thing we need to do is configure where Webpack should store our modules. Within&nbsp;<code>/config/webpack.common.js</code>, update the&nbsp;<code>output</code>&nbsp;parameter with the following directives:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"module.exports = {\n  output: {\n    chunkFilename: '[name].bundle.js',\n    publicPath: '/wp-content/themes/{your-theme-name}/{your-build-folder}/'\n  }\n}","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"There are two things happening here:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreListBlock","name":"core/list","attributes":{"values":"<li>We’re telling Webpack what kind of name to use for chunk files. The&nbsp;<code>[name]</code>&nbsp;here is a Webpack variable that gets replaced at build time.</li><li>We’re telling Webpack where these chunk files are located (it will default to the build destination).</li>","ordered":true}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"2. Configure Dynamic Imports","level":3}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The second thing we’ll do is add the&nbsp;<code>@babel/plugin-syntax-dynamic-import</code>&nbsp;dependency to our project. Do this by running:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"npm install @babel/plugin-syntax-dynamic-import -D","className":"bash"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Next, we need to make sure that Webpack knows that dynamic imports require Promise support (since internally it will fetch the module via a Promise request). We can do this with the&nbsp;<code>@babel/preset-env</code>&nbsp;preset by defining a couple of options.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"In your&nbsp;<code>/config/webpack.commons.js</code>&nbsp;ensure the following is present on your&nbsp;<code>babel-loader</code>&nbsp;options (this might also be defined in your&nbsp;<code>.babelrc</code>&nbsp;file, so check there too):","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"loader: 'babel-loader',\noptions: {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\t\t\t\t\t\t\t\t          \n        'useBuiltIns': 'usage',\t\t\t\t\t\t\t\t \n        'corejs': 3,\n       }\n    ]\n  ],\n}","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"This tells the&nbsp;<code>@babel/preset-env</code>&nbsp;preset to include polyfills on a per-use basis, as encountered in your code files. When the&nbsp;<code>babel-loader</code>&nbsp;comes across our dynamic import, it will automatically include a Promise polyfill across the application.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"3. Create an On-Demand Component","level":3}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Creating an on-demand component is a fancy way of telling the JavaScript to scan the page (after loading) for any pre-defined identifier that we can check against to automatically fetch required dependencies.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"For example, I recently worked on a project where we had a Subscription component. It was fairly large in terms of size, but was only present on certain pages.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Normally, in this scenario, you’d probably build the component as a separate file, compile it as a separate Webpack entry, and then do your conditional checks via PHP before loading it on the page.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"With dynamic module imports, all this can happen client-side with minimal impact to file-size. Let me show you what I mean:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Let’s assume a directory structure like this:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreImageBlock","name":"core/image","attributes":{"alt":"","url":"http://gatsby.dev/wp-content/uploads/2020/02/Screen-Shot-2020-01-17-at-3.39.13-PM.png","localFile":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='338'%20viewBox='0%200%20400%20338'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20169v169h401V0H0v169M108%2013v11c2%201%2015%202%2016%201V13h-4l-4-1c-2-2-8-1-8%201m21%2033l-1%206v5h16V47h-4l-4-1h-7m-1%2039l1%206h15v-5c0-5%200-6-9-7h-7v6m0%2028v6l1%205h15v-10h-4l-4-1c-1-2-7-1-8%200m20%2033v7c0%204%201%205%203%205l4%201h6c3%202%204%201%205-3%200-7-1-9-6-9a414%20414%200%2001-12-1m21%2039v6h15v-5c0-6%200-6-8-7h-7v6m6%2026v1l-1%201-4%203-2%202%204%205%205%204%204-3c5-5%205-6%200-10-3-4-6-5-6-3m-26%2033l-1%208v8h10c8%200%207%201%207-8v-8l-8-1-8%201m-21%2041l1%207h8l8%201-1-6c0-7%200-7-9-8h-7v6m0%2034l1%206h15v-5c0-5%200-6-9-7h-7v6'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.1851851851851851,"src":"/static/d378773e920befb84d60802825fb459e/30492/Screen-Shot-2020-01-17-at-3.39.13-PM.png","srcSet":"/static/d378773e920befb84d60802825fb459e/460e9/Screen-Shot-2020-01-17-at-3.39.13-PM.png 192w,\n/static/d378773e920befb84d60802825fb459e/450e9/Screen-Shot-2020-01-17-at-3.39.13-PM.png 384w,\n/static/d378773e920befb84d60802825fb459e/30492/Screen-Shot-2020-01-17-at-3.39.13-PM.png 670w","srcWebp":"/static/d378773e920befb84d60802825fb459e/f2e2f/Screen-Shot-2020-01-17-at-3.39.13-PM.webp","srcSetWebp":"/static/d378773e920befb84d60802825fb459e/7d09c/Screen-Shot-2020-01-17-at-3.39.13-PM.webp 192w,\n/static/d378773e920befb84d60802825fb459e/faab5/Screen-Shot-2020-01-17-at-3.39.13-PM.webp 384w,\n/static/d378773e920befb84d60802825fb459e/f2e2f/Screen-Shot-2020-01-17-at-3.39.13-PM.webp 670w","sizes":"(max-width: 670px) 100vw, 670px"}}}}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Inside&nbsp;<code>frontend.js</code>&nbsp;we have all our normal logic like any normal application. The&nbsp;<code>/components/</code>&nbsp;directory is where we keep (you guessed it) all our on-demand components.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Inside&nbsp;<code>frontend.js</code>&nbsp;we import these components like normal:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"import './components/SubscribeForm';","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Normally, this would end up importing the entire component, but because we are adopting a dynamic loading infrastructure, the actual file being imported is minimal.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Let’s take a look at what’s inside&nbsp;<code>/components/SubscribeForm</code>:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreImageBlock","name":"core/image","attributes":{"alt":"","url":"http://gatsby.dev/wp-content/uploads/2020/02/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png","localFile":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='171'%20viewBox='0%200%20400%20171'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2086v85h399V0H0v86m190-2l1%209h7c9%200%209%200%209-8%200-9%200-9-9-9h-8v8m0%2034v8h8c9%200%209%200%209-8%200-9%200-9-9-9h-8v9m1%2025l-1%208v8h17v-7l-1-9c-1-1-14-2-15%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.341463414634146,"src":"/static/8b1f219cce71bb76a602b17e911fc250/0756a/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png","srcSet":"/static/8b1f219cce71bb76a602b17e911fc250/460e9/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png 192w,\n/static/8b1f219cce71bb76a602b17e911fc250/450e9/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png 384w,\n/static/8b1f219cce71bb76a602b17e911fc250/0756a/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png 768w,\n/static/8b1f219cce71bb76a602b17e911fc250/a8378/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.png 1024w","srcWebp":"/static/8b1f219cce71bb76a602b17e911fc250/7f8e9/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.webp","srcSetWebp":"/static/8b1f219cce71bb76a602b17e911fc250/7d09c/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.webp 192w,\n/static/8b1f219cce71bb76a602b17e911fc250/faab5/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.webp 384w,\n/static/8b1f219cce71bb76a602b17e911fc250/7f8e9/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.webp 768w,\n/static/8b1f219cce71bb76a602b17e911fc250/cc834/Screen-Shot-2020-02-18-at-3.47.07-PM-1024x437.webp 1024w","sizes":"(max-width: 768px) 100vw, 768px"}}}}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"The component includes a lot of inner-workings, which is normal of most components. But by having the entry file as&nbsp;<code>index.js</code>, we can name the actual component file (where the real stuff happens) the same as the parent folder.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"This keeps things more clear, and if you were looking at this folder without context, you might assume&nbsp;<code>SubscribeForm.js</code>&nbsp;is the actual component, while&nbsp;<code>index.js</code>&nbsp;is simply the entry file.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"And this structure makes on-demand components so simple to maintain. Each component is, essentially, an isolated application. We simply include it in our main stack by calling the&nbsp;<code>index.js</code>&nbsp;file (this is assumed when calling a folder, as we did in&nbsp;<code>frontend.js</code>). Everything else in the component folder handles itself.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"So, let’s see what’s in&nbsp;<code>index.js</code>:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreCodeBlock","name":"core/code","attributes":{"nonNullContent":"/**\n * Dynamically import form dependencies and initialize.\n *\n * @type {NodeListOf&lt;Element>}\n */\nconst forms = document.querySelectorAll( '.SubscribeForm' );\nif ( forms.length ) {\n  import( './SubscribeForm' )\n    .then( ( { default: SubscribeForm } ) => {\n      SubscribeForm.initialize( forms );\n    }\n}","className":"javascript"}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"Here we are doing three things:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreListBlock","name":"core/list","attributes":{"values":"<li>Getting all elements in the&nbsp;<code>document</code>&nbsp;with the class&nbsp;<code>SubscribeForm</code>.</li><li>If the length of&nbsp;<code>forms</code>&nbsp;is greater than 0 (<code>0</code>&nbsp;is interpreted as&nbsp;<code>false</code>, anything more is&nbsp;<code>true</code>), then we import the main&nbsp;<code>SubscribeForm.js</code>&nbsp;file from the relative root of the component folder,&nbsp;<strong>dynamically</strong>.</li><li>Upon success, and with access to the new component, we initialize all the forms on the page.</li>","ordered":true}},{"__typename":"WPGraphQL_CoreHeadingBlock","name":"core/heading","attributes":{"content":"In Summary","level":2}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"There’s more to dissect here, and this is an admittedly over-simplified tutorial on dynamic imports — but the possibilities of adopting this pattern are great:","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreListBlock","name":"core/list","attributes":{"values":"<li>A unified component-loading pattern, in the form of a helper method, could simplify component imports. Imagine something like&nbsp;<code>Components.onDemand( [ 'SubscribeForm', 'OtherComponent', 'Another' ] )</code>.</li><li>The first application JavaScript file delivered to the client could theoretically be in the ~10kb range, assuming every component was dynamic.</li>","ordered":true}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"And there’s more, I’m sure. When I originally built this component system, I matched the patterns across PHP and JS, so that each component utilized classes and shared naming conventions, lowering the cost of shifting between backend and frontend code.","dropCap":false,"fontSize":null}},{"__typename":"WPGraphQL_CoreParagraphBlock","name":"core/paragraph","attributes":{"__typename":"WPGraphQL_CoreParagraphBlockAttributesV3","content":"<strong>If you’ve done something similar to this before, I’d love to hear about it!</strong>","dropCap":false,"fontSize":null}}],"date":"2020-02-18T15:51:26","excerpt":"<p>I’m sure you’ve been here before: you’ve just been assigned to this large project on a major client website. It includes a cohesive component-driven design system, and strives to reuse and inherit those components throughout the application. You think to yourself,&nbsp;“This is going to be great!” You open up your&nbsp;code editor of choice, and gleefully [&hellip;]</p>\n","title":"Code-Splitting in WordPress","slug":"code-splitting-wordpress","postId":76,"author":{"avatar":{"url":"http://0.gravatar.com/avatar/c4e7524abdec288e00e23dc1d15f91d7?s=96&d=mm&r=g","localFile":{"childImageSharp":{"fixed":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='40'%20height='40'%20viewBox='0%200%2040%2040'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%200l6%202%205%202-2%201-5-2H0v18l1%2019%202-2%202-4c0-2%200-2-2-2l-1-5v-5h4l4-1%202%201v4l4%209%202%202c2%204%204%204%205%201l2-2%201-1%201-5c0-4-1-4-3%200-2%202-4%203-3%200l-2-1-3-1h1l2-1h2l3-1c1%200%201-1-2-1-4-2-5-1-6%200-1%202-1%202-3-2l-2-4%204-1c5%200%205-2%201-2-2%200-3%200-3-2%200-3%203-5%208-6s6%200%206%204l1%204%201-1c0-3%201-3%204-2s3%201%203%207c0%205%200%207%202%208%203%202%203%2010%200%209l-2%202h3c2%200%202-3%202-18L40%202c0-2-3-2-20-2H0m0%2022c0%2012%201%2014%201%206V16l4%201c5%201%205%202%204-5V6H5L2%207%201%206%200%2022'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","width":40,"height":40,"src":"/static/9172a1c088de62f7ef5f5d27fc94f236/b13df/c4e7524abdec288e00e23dc1d15f91d7.jpg","srcSet":"/static/9172a1c088de62f7ef5f5d27fc94f236/b13df/c4e7524abdec288e00e23dc1d15f91d7.jpg 1x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/c28c8/c4e7524abdec288e00e23dc1d15f91d7.jpg 1.5x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/4e333/c4e7524abdec288e00e23dc1d15f91d7.jpg 2x","srcWebp":"/static/9172a1c088de62f7ef5f5d27fc94f236/44b89/c4e7524abdec288e00e23dc1d15f91d7.webp","srcSetWebp":"/static/9172a1c088de62f7ef5f5d27fc94f236/44b89/c4e7524abdec288e00e23dc1d15f91d7.webp 1x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/05cc6/c4e7524abdec288e00e23dc1d15f91d7.webp 1.5x,\n/static/9172a1c088de62f7ef5f5d27fc94f236/e90a5/c4e7524abdec288e00e23dc1d15f91d7.webp 2x"}}}},"description":null,"nickname":null,"firstName":"Calvin","lastName":"Koepke"},"featuredImage":null}}},"pageContext":{"id":"cG9zdDo3Ng=="}}}